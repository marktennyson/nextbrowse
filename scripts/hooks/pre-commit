#!/bin/bash

# Pre-commit hook for NextBrowse
# Automatically compresses build artifacts before commit

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "${YELLOW}[PRE-COMMIT]${NC} $*"
}

# Check if we're on the production-ready branch
BRANCH=$(git branch --show-current)
if [ "$BRANCH" != "production-ready" ]; then
    exit 0  # Skip on non-production branches
fi

log "Running pre-commit asset compression..."

PROJECT_ROOT="$(git rev-parse --show-toplevel)"
ASSETS_DIR="$PROJECT_ROOT/assets"

# Check if rar is available
if ! command -v rar &> /dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} rar command not found. Skipping asset compression."
    echo "Install rar with: brew install rar"
    exit 0
fi

# Create assets directory if it doesn't exist
mkdir -p "$ASSETS_DIR"

# Function to compress if source exists and is newer than target
compress_if_newer() {
    local source="$1"
    local target="$2"
    local description="$3"
    
    if [ -e "$source" ]; then
        # Check if target doesn't exist or source is newer
        if [ ! -f "$target" ] || [ "$source" -nt "$target" ]; then
            log "Compressing $description..."
            if [ -d "$source" ]; then
                rar a -ep1 -r "$target" "$source/"
            else
                rar a -ep1 "$target" "$source"
            fi
            git add "$target"
            echo -e "${GREEN}[SUCCESS]${NC} Compressed $description"
        fi
    fi
}

# Compress Go binaries
if ls "$PROJECT_ROOT/backend/nextbrowse-backend-"* &>/dev/null; then
    compress_if_newer \
        "$PROJECT_ROOT/backend/nextbrowse-backend-*" \
        "$ASSETS_DIR/go-binaries.rar" \
        "Go binaries"
fi

# Compress Next.js build
compress_if_newer \
    "$PROJECT_ROOT/frontend/.next" \
    "$ASSETS_DIR/nextjs-build.rar" \
    "Next.js build"

# Update build metadata
if [ -f "$ASSETS_DIR/build-info.json" ] || [ -f "$ASSETS_DIR/go-binaries.rar" ] || [ -f "$ASSETS_DIR/nextjs-build.rar" ]; then
    cat > "$ASSETS_DIR/build-info.json" << EOF
{
    "build_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "git_commit": "$(git rev-parse HEAD)",
    "git_branch": "$(git branch --show-current)",
    "pre_commit_hook": true,
    "assets": {
        "go_binaries": $([ -f "$ASSETS_DIR/go-binaries.rar" ] && echo "true" || echo "false"),
        "nextjs_build": $([ -f "$ASSETS_DIR/nextjs-build.rar" ] && echo "true" || echo "false")
    }
}
EOF
    git add "$ASSETS_DIR/build-info.json"
    log "Updated build metadata"
fi

log "Pre-commit asset compression completed"
